#include <stdio.h>
#include <fcntl.h>
#include <ext2fs/ext2_fs.h>
#include <stdlib.h>

int main(int argc, char *argv[]) {

    if (argc != 2) {
        fprintf(stderr, "Usage: %s <file-to-recover>\n", argv[0]);
        exit(1);
    }

    int fd = open(argv[1], O_RDONLY);
    if (fd < 0) {
        perror("open");
        exit(1);
    }

    // Read the superblock to get the block size
    struct ext2_super_block super;
    if (lseek(fd, EXT2_MIN_BLOCK_SIZE, SEEK_SET) < 0) {
        perror("lseek");
        exit(1);
    }
    if (read(fd, &super, sizeof(super)) < 0) {
        perror("read");
        exit(1);
    }

    // Calculate the location of the inode table
    int block_size = 1024 << super.s_log_block_size;
    int inode_table_block = super.s_first_data_block + 1;
    int inode_table_offset = inode_table_block * block_size;

    // Search the inode table for a deleted file with the given name
    struct ext2_inode inode;
    for (int i = 0; i < super.s_inodes_count; i++) {
        if (lseek(fd, inode_table_offset + i * sizeof(inode), SEEK_SET) < 0) {
            perror("lseek");
            exit(1);
        }
        if (read(fd, &inode, sizeof(inode)) < 0) {
            perror("read");
            exit(1);
        }
        if (!inode.i_links_count && inode.i_mode & EXT2_S_IFREG) {
            // This is a deleted file, check the name
            char name[EXT2_NAME_LEN + 1];
            if (lseek(fd, block_size * inode.i_block[0], SEEK_SET) < 0) {
                perror("lseek");
                exit(1);
            }
            if (read(fd, name, EXT2_NAME_LEN) < 0) {
                perror("read");
                exit(1);
            }
            name[EXT2_NAME_LEN] = '\0';
            if (!strcmp(name, argv[1])) {
                // Found a match, attempt to recover the file
                // ...
                break;
            }
        }
    }
