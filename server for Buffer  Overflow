#include <stdio.h>
#include <string.h>
#include <sys/socket.h>
#include <netinet/in.h>

#define PORT 1234
#define BUFFER_SIZE 256

int main(int argc, char *argv[]) {
    int sockfd, new_sockfd;
    struct sockaddr_in server_address, client_address;
    int client_address_len;
    char buffer[BUFFER_SIZE];

    // Create a socket
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    if (sockfd < 0) {
        perror("Error opening socket");
        return 1;
    }

    // Bind the socket to an address and port
    memset(&server_address, 0, sizeof(server_address));
    server_address.sin_family = AF_INET;
    server_address.sin_addr.s_addr = htonl(INADDR_ANY);
    server_address.sin_port = htons(PORT);
    if (bind(sockfd, (struct sockaddr *) &server_address, sizeof(server_address)) < 0) {
        perror("Error binding socket");
        return 1;
    }

    // Listen for incoming connections
    listen(sockfd, 5);

    while (1) {
        // Accept an incoming connection
        client_address_len = sizeof(client_address);
        new_sockfd = accept(sockfd, (struct sockaddr *) &client_address, &client_address_len);
        if (new_sockfd < 0) {
            perror("Error accepting connection");
            continue;
        }

        // Read data from the client
        int n = read(new_sockfd, buffer, BUFFER_SIZE - 1);
        if (n < 0) {
            perror("Error reading from socket");
            close(new_sockfd);
            continue;
        }

        buffer[n] = '\0';
        printf("Received: %s\n", buffer);

        // Send data back to the client
        n = write(new_sockfd, buffer, strlen(buffer));
        if (n < 0) {
            perror("Error writing to socket");
        }

        // Close the connection
        close(new_sockfd);
    }

    return 0;
}
